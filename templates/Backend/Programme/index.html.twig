{% extends 'base.html.twig' %}

{% block title %}
	Administration programme
{% endblock %}

{% block body %}
	<section class="mt-4">
		<h1 class="text-center">Administration des Programmes</h1>
        <div class="btn-container">
		<a href="{{path('app.home')}}" class="button btn-secondaire">
			<i class="bi bi-chat-text"></i>Acceuil</a>
			<a href="{{path('admin.programmes.create')}}" class='button btn-secondaire'>Ajouter</a>
        </div>
		<table class="table table-striped table-bordered" data-toggle="table" data-sort-name="fullName" data-sort-order="asc" data-pagination="true" data-search="true" data-show-columns="true">
			<thead>
				<tr>
					<th>Name</th>
					<th>date de creation</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				{% for programme in programmes %}
					<tr>
						<td>{{programme.name}}</td>
						<td>{{programme.createdAt|ago}}</td>
						<td scope="col">
							<div class="d-flex gap-2">
								<a href="{{ path('admin.programmes.edit', {id: programme.id}) }}" class="btn btn-primaire">Modifier</a>
								<form action="{{ path('admin.programmes.delete', {id: programme.id}) }}" method="POST" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce programme')">
									<input type="hidden" name="token" value="{{ csrf_token('delete'~ programme.id) }}">
									<button type="submit" class="btn btn-danger">Supprimer</button>
								</form>
							</div>
						</td>
					</tr>
				{% endfor %}
			</tbody>
		</table>
	</section>
	<script>
	document.addEventListener('DOMContentLoaded', function () {
    const filterButtons = document.querySelectorAll('.filter-button');
    const programmeItems = document.querySelectorAll('.programme-item');
    console.log(filterButtons)
    const searchInput = document.getElementById("myInput");
    function filterProgrammes() {
        // Récupère la valeur de la barre de recherche en majuscules
        const filter = searchInput.value.toUpperCase();
        // Récupère le type de programme sélectionné ou 'all' par défaut
        const selectedProType = document.querySelector('.filter-button.act')?.getAttribute('data-protype') || 'all';
        programmeItems.forEach(item => {
            // Récupère le nom du programme pour le filtrage
            const programmeName = item.querySelector('h2').textContent.toUpperCase(); // Correction: recherche sur le titre
            const programmeType = item.getAttribute('data-protype');
            console.log(programmeType)
            // Vérifie si le programme correspond à la recherche et au filtre de catégorie
            const matchesFilter = programmeName.indexOf(filter) > -1;
            const matchesType = selectedProType === 'all' || selectedProType === programmeType;
            // Affiche ou masque les programmes selon les correspondances
            if (matchesFilter && matchesType) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }
    // Gestion du clic sur les boutons de filtre
    filterButtons.forEach(button => {
        button.addEventListener('click', function () {
            filterButtons.forEach(btn => btn.classList.remove('act')); // Retire la classe 'act' des autres boutons
            this.classList.add('act'); // Ajoute la classe 'act' au bouton cliqué
            filterProgrammes(); // Applique le filtrage
        });
    });
    // Gestion de la recherche en temps réel
    searchInput.addEventListener('keyup', filterProgrammes);
    // Initialisation avec tous les programmes visibles
    filterProgrammes();
});


	</script>
	
{% endblock %}

