{% extends 'base.html.twig' %}

{% block title %}
Programmes
{% endblock %}

{% block body %}
<section class="content anim fade-inC animate">
	<div class="programme-head">
    	<h1>Programme</h1>
	</div>
	<div class="input-container">
    	<input type="text" id="myInput" class='search' placeholder="Rechercher un programme...">
	</div>
    <div class="filters">
        <button class="filter-button button" data-protype="all">Tous</button>
        {% for categorie in categories %}
            <button class="filter-button button" data-protype="{{ categorie.name }}">{{ categorie.name }}</button>
        {% endfor %}
    </div>
    <div class="programme-list anim animate fade-inR ">
        {% for programme in programmes %}
		<a href='{{path('user.programmes.details',{slug:programme.slug})}}'>
            <div class="pro-list programme-item" data-protype="{{ programme.categorie.name }}" style="background: center/cover url('{{vich_uploader_asset(programme.categorie)}}')">
                <div class='text-container'>
                    <h2>{{ programme.name }}</h2>
                    <p>{{programme.shortDescription}}</p>
                    <p><i class="fa-solid fa-dumbbell fa-xs"></i> {{programme.exercices|length}}</p>
			    </div>
	{% if programme in fav %}
    <form action="{{ path('user.favoris.delete', {id: programme.id}) }}" method="POST" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce programme de vos favoris ? ')">
			<input type="hidden" name="token" value="{{ csrf_token('delete'~ programme.id) }}">
        <button type="submit"><i class="fa-solid fa-heart" style="color: #fb98d2;"></i></button>
    </form>
{% else %}
    <form action="{{ path('user.favoris.add', { slug: programme.slug }) }}" method="POST" onsubmit="return confirm('Êtes-vous sûr de vouloir ajouter ce programme à vos favoris ?')">
        <input type="hidden" name="token" value="{{ csrf_token('add' ~ programme.slug) }}">
        <button type="submit"><i class="fa-regular fa-heart " style="color: #fb98d2;"></i></button>
    </form>
{% endif %}
            </div>
		</a>
        {% endfor %}
    </div>
</section>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function () {
    const filterButtons = document.querySelectorAll('.filter-button');
    const programmeItems = document.querySelectorAll('.programme-item');
    console.log(filterButtons)
    const searchInput = document.getElementById("myInput");

    function filterProgrammes() {
        // Récupère la valeur de la barre de recherche en majuscules
        const filter = searchInput.value.toUpperCase();
        // Récupère le type de programme sélectionné ou 'all' par défaut
        const selectedProType = document.querySelector('.filter-button.act')?.getAttribute('data-protype') || 'all';
        
        programmeItems.forEach(item => {
            // Récupère le nom du programme pour le filtrage
            const programmeName = item.querySelector('h2').textContent.toUpperCase(); // Correction: recherche sur le titre
            const programmeType = item.getAttribute('data-protype');
            console.log(programmeType)
            
            // Vérifie si le programme correspond à la recherche et au filtre de catégorie
            const matchesFilter = programmeName.indexOf(filter) > -1;
            const matchesType = selectedProType === 'all' || selectedProType === programmeType;

            // Affiche ou masque les programmes selon les correspondances
            if (matchesFilter && matchesType) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Gestion du clic sur les boutons de filtre
    filterButtons.forEach(button => {
        button.addEventListener('click', function () {
            filterButtons.forEach(btn => btn.classList.remove('act')); // Retire la classe 'act' des autres boutons
            this.classList.add('act'); // Ajoute la classe 'act' au bouton cliqué
            filterProgrammes(); // Applique le filtrage
        });
    });

    // Gestion de la recherche en temps réel
    searchInput.addEventListener('keyup', filterProgrammes);

    // Initialisation avec tous les programmes visibles
    filterProgrammes();
});

</script>
{% endblock %}
